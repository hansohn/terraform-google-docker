---
name: docker

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - '*'
    tags:
      - 'v?[0-9]+.[0-9]+.[0-9]+'
  schedule:
    - cron: '0 7 * * 1,3,5'
  workflow_dispatch:

env:
  BUILD_CONTEXT: './docker'
  PYTHON_VERSION: 3.11

jobs:
  matrix:
    name: Matrix
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.generate-matrix.outputs.tfver }}
    steps:
      - name: Set DOCKER_REPO env
        run: echo "DOCKER_REPO=${GITHUB_REPOSITORY%-docker}" >> $GITHUB_ENV

      - name: Generate Matrix
        id: generate-matrix
        run: |
          sudo add-apt-repository ppa:deadsnakes/ppa
          sudo apt-get install --no-install-recommends -y jq python${PYTHON_VERSION} python${PYTHON_VERSION}-distutils python3-pip
          python${PYTHON_VERSION} -m pip install --upgrade pip
          python${PYTHON_VERSION} -m pip install tfver
          tfver=$(tfver -vMmL -t "${DOCKER_REPO}:{tag}" | jq '.versions')
          echo ${tfver}
          echo tfver=${tfver} >> $GITHUB_OUTPUT

  build:
    name: Build ${{ matrix.versions.version }}
    runs-on: ubuntu-latest
    needs: [ matrix ]
    if: |
      github.event_name != 'schedule'
      && !(github.event_name == 'push' && github.ref_type == 'tag')
    strategy:
      matrix:
        versions: ${{ fromJSON(needs.matrix.outputs.versions) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        uses: docker/build-push-action@v5
        with:
          build-args: |
            TERRAFORM_VERSION=${{ matrix.versions.version }}
          context: ${{ env.BUILD_CONTEXT }}
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ join(matrix.versions.tags, ',') }}

  deploy:
    name: Deploy ${{ matrix.versions.version }}
    runs-on: ubuntu-latest
    needs: [ matrix ]
    if: |
      github.event_name == 'push'
      && github.ref_type == 'tag'
    strategy:
      matrix:
        versions: ${{ fromJSON(needs.matrix.outputs.versions) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        uses: docker/build-push-action@v5
        with:
          build-args: |
            TERRAFORM_VERSION=${{ matrix.versions.version }}
          context: ${{ env.BUILD_CONTEXT }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ join(matrix.versions.tags, ',') }}

  redeploy:
    name: Redeploy ${{ matrix.versions.version }}
    runs-on: ubuntu-latest
    needs: [ matrix ]
    if: github.event_name == 'schedule'
    strategy:
      matrix:
        versions: ${{ fromJSON(needs.matrix.outputs.versions) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get previous tag
        id: previous_tag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: main

      - name: Checkout previous tag
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.previous_tag.outputs.tag }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Rebuild and push
        uses: docker/build-push-action@v6
        with:
          build-args: |
            TERRAFORM_VERSION=${{ matrix.versions.version }}
          context: ${{ env.BUILD_CONTEXT }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ join(matrix.versions.tags, ',') }}

  dockerhub:
    name: Dockerhub
    runs-on: ubuntu-latest
    needs: [ matrix, deploy, redeploy ]
    if: |
      always()
      && !contains(needs.*.result, 'failure')
      && (contains(needs.deploy.result, 'success') || contains(needs.redeploy.result, 'success'))
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set DOCKER_REPO env
        run: echo "DOCKER_REPO=${GITHUB_REPOSITORY%-docker}" >> $GITHUB_ENV

      - name: Update dockerHub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.DOCKER_REPO }}
          short-description: ${{ github.event.repository.description }}

  slack:
    name: Slack
    runs-on: ubuntu-latest
    needs: [ matrix, build, dockerhub ]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Slack Notification
        uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          channel: ${{ secrets.SLACK_CHANNEL_ID }}
          name: ${{ secrets.SLACK_USERNAME }}
          icon_url: "https://cdn-icons-png.flaticon.com/512/25/25231.png"
